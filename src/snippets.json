{
  "Angular Component": {
    "prefix": "ng-component",
    "description": "Component with template and style urls",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:app}-${2:name}',",
      "\ttemplateUrl: './${2:name}.component.html',",
      "\tstyleUrls: ['./${2:name}.component.${3|scss,less,css|}']",
      "})",
      "export class ${4:Name}Component implements OnInit {",
      "\tconstructor($5) { }",
      "",
      "\tngOnInit(): void {${6: }}",
      "}",
      "$0"
    ]
  },
  "Angular Component Inline": {
    "prefix": "ng-component-inline",
    "description": "Component with inline Template and Styles",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:app}-${2:name}',",
      "\ttemplate: `${3}`,",
      "\tstyles: [`${4}`]",
      "})",
      "export class ${5:Name}Component implements OnInit {",
      "\tconstructor($6) { }",
      "",
      "\tngOnInit(): void {${7: }}",
      "}",
      "$0"
    ]
  },
  "Angular Component With NG_VALUE_ACCESSOR": {
    "prefix": "ng-component-value-accessor",
    "description": "Angular Component With NG_VALUE_ACCESSOR",
    "types": "typescript",
    "body": [
      "import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';",
      "import { Component, Input, OnInit, forwardRef } from '@angular/core';",
      "",
      "export const ${1:COMPONENT_NAME}_VALUE_ACCESSOR: any = {",
      "\tprovide: NG_VALUE_ACCESSOR,",
      "\tuseExisting: forwardRef(() => ${2:ComponentName}Component),",
      "\tmulti: true",
      "};",
      "",
      "@Component({",
      "\tselector: '${3:selector-name}',",
      "\ttemplateUrl: './${4:name}.component.html',",
      "\tstyleUrls: ['./${4:name}.component.css'],",
      "\tproviders: [${1:COMPONENT_NAME}_VALUE_ACCESSOR]",
      "})",
      "export class ${2:ComponentName}Component implements OnInit, ControlValueAccessor {",
      "",
      "\tprivate _value: any;",
      "",
      "\tset value(value: any) {",
      "\t\tthis._value = value;",
      "\t\tthis.notifyValueChange();",
      "\t}",
      "",
      "\tget value(): any {",
      "\t\treturn this._value;",
      "\t}",
      "",
      "\tonChange: (value) => {};",
      "\tonTouched: () => {};",
      "",
      "\tconstructor() { }",
      "",
      "\tnotifyValueChange(): void {",
      "\t\tif (this.onChange) {",
      "\t\t\tthis.onChange(this.value);",
      "\t\t}",
      "\t}",
      "",
      "\tngOnInit(): void {",
      "\t\t",
      "\t}",
      "",
      "\twriteValue(obj: any): void {",
      "\t\tthis._value = obj;",
      "\t}",
      "",
      "\tregisterOnChange(fn: any): void {",
      "\t\tthis.onChange = fn;",
      "\t}",
      "",
      "\tregisterOnTouched(fn: any): void {",
      "\t\tthis.onTouched = fn;",
      "\t}",
      "",
      "\tsetDisabledState(isDisabled: boolean): void {",
      "\t}",
      "}",
      "$0"
    ]
  },
  "Angular Validator": {
    "prefix": "ng-validator",
    "description": "Angular validator snippet",
    "types": "typescript",
    "body": [
      "import { Directive } from '@angular/core';",
      "import { NG_VALIDATORS, AbstractControl, Validator, ValidationErrors } from '@angular/forms';",
      "",
      "@Directive({",
      "\tselector: '[${validatorName}][ngModel]',",
      "\tproviders: [",
      "\t\t{ provide: NG_VALIDATORS, useExisting: ${className}, multi: true }",
      "\t]",
      "})",
      "",
      "export class ${className} implements Validator {",
      "\tvalidate(c: AbstractControl): ValidationErrors | null {",
      "\t\tif (valid) {",
      "\t\t\treturn null;",
      "\t\t}",
      "",
      "\t\treturn {",
      "\t\t\t${validatorName}: {",
      "\t\t\t\tvalid: false",
      "\t\t\t}",
      "\t\t};",
      "\t}",
      "}"
    ]
  },
  "Angular Validator Function": {
    "scope": "typescript",
    "prefix": "ng-validator-fn",
    "body": [
      "export const validator = (parameters: any): ValidatorFn =>",
      "  (abstractControl: AbstractControl): ValidationErrors | null => {",
      "   return null;",
      "};"
    ],
    "description": "Angular Validator Function"
  },
  "Angular Async Validator Function": {
    "prefix": "ng-async-validator-fn",
    "body": [
      "export const validator = (parameters: any): AsyncValidatorFn =>",
      "  (abstractControl: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {",
      "    return Promise.resolve(null);",
      "  };"
    ],
    "description": "Angular Async Validator Function"
  },
  "Angular Directive": {
    "prefix": "ng-directive",
    "description": "Directive template",
    "types": "typescript",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({",
      "\tselector: '${1:app}-${2:Name}',",
      "})",
      "export class ${2:Name}Directive {${3: }}$0"
    ]
  },
  "Angular CSS Directive": {
    "prefix": "ng-directive-css",
    "description": "CSS directive",
    "types": "typescript",
    "body": [
      "import { Directive, ElementRef, Input } from '@angular/core';",
      "",
      "@Directive({",
      "\tselector: '[${1:app}-${2:Name}]',",
      "})",
      "export class ${2:Name}Directive {",
      "\tconstructor(private elementRef: ElementRef) {}",
      "",
      "\tprivate ${3:name}(${4:value}: string) {",
      "\t\tthis.elementRef.nativeElement.style.${5:proptery} = ${6:value};",
      "\t}",
      "}$0"
    ]
  },
  "Angular Attribute Directive": {
    "prefix": "ng-directive-attribute",
    "description": "Attribute directive",
    "types": "typescript",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({",
      "\tselector: '[${1:app}-${2:Name}]',",
      "})",
      "export class ${2:Name}Directive {${4: }}$0"
    ]
  },
  "Angular Service": {
    "prefix": "ng-service",
    "description": "Basic service",
    "types": "typescript",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable({",
      "\tprovidedIn: 'root'",
      "})",
      "export class ${Name}Service {",
      "$0}"
    ]
  },
  "Angular Bootstrapping": {
    "prefix": "ng-bootstraping",
    "description": "Bootstraping example",
    "types": "typescript",
    "body": [
      "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';",
      "import { enableProdMode } from '@angular/core';",
      "import { AppModule } from './app/app.module';",
      "",
      "if (environment.production) {",
      "\tenableProdMode();",
      "}",
      "platformBrowserDynamic().bootstrapModule(AppModule)",
      "\t.then(success => console.log(`Bootstrap success`))",
      "\t.catch(err => console.error(err));",
      "",
      "// Move to separate file",
      "export const environment = {",
      "\tproduction: false",
      "};"
    ]
  },
  "Angular Feature Module": {
    "prefix": "ng-module",
    "description": "Feature Module",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { CommonModule } from '@angular/common';",
      "",
      "@NgModule({",
      "\tdeclarations: [],",
      "\timports: [ CommonModule ],",
      "\texports: [],",
      "\tproviders: [],",
      "})",
      "export class ${Feature}Module {}"
    ]
  },
  "Angular Root Module": {
    "prefix": "ng-module-root",
    "description": "App root module",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { BrowserModule } from '@angular/platform-browser';",
      "import { ${App}Component }  from './${app}.component';",
      "",
      "@NgModule({",
      "\tdeclarations: [ ${App}Component ],",
      "\timports: [ BrowserModule ],",
      "\tproviders: [],",
      "\tbootstrap: [ ${App}Component ]",
      "})",
      "export class ${App}Module {}"
    ]
  },
  "Angular Pipe": {
    "prefix": "ng-pipe",
    "description": "Pipe template",
    "types": "typescript",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({name: '${name}'})",
      "export class ${Name}Pipe implements PipeTransform {",
      "\ttransform(value: any): any {",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "Angular Pipe Example": {
    "prefix": "ng-pipe-example",
    "description": "Angular pipe example",
    "types": "typescript",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "/*",
      " * Raise the value exponentially",
      " * Takes an exponent argument that defaults to 1.",
      " * Usage:",
      " *   value | exponentialStrength:exponent",
      " * Example:",
      " *   {{ 2 |  exponentialStrength:10}}",
      " *   formats to: 1024",
      "*/",
      "@Pipe({name: 'exponentialStrength'})",
      "export class ExponentialStrengthPipe implements PipeTransform {",
      "\ttransform(value: number, exponent: string): number {",
      "\t\tlet exp = parseFloat(exponent);",
      "\t\treturn Math.pow(value, isNaN(exp) ? 1 : exp);",
      "\t}",
      "}"
    ]
  },
  "Angular UpperCase Pipe": {
    "prefix": "ng-pipe-uppercase",
    "description": "Uppercase pipe",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | uppercase }}$0"
    ]
  },
  "Angular LowerCase Pipe": {
    "prefix": "ng-pipe-lowercase",
    "description": "Lowercase pipe",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | lowercase }}$0"
    ]
  },
  "Angular TitleCase Pipe": {
    "prefix": "ng-pipe-titlecase",
    "description": "v4: Titlecase pipe",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | titlecase }}$0"
    ]
  },
  "Angular Date Pipe": {
    "prefix": "ng-pipe-date",
    "description": "Date pipe - Default format: 09/15/1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date }}$0"
    ]
  },
  "Angular Custom Date Pipe": {
    "prefix": "ng-pipe-date-custom",
    "description": "Date pipe - Format: \"MM/dd/yy\" = 09/15/71",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:\"MM/dd/yy\" }}$0"
    ]
  },
  "Angular Short Date Pipe": {
    "prefix": "ng-pipe-date-short",
    "description": "Short date pipe - Format: 09/15/1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:shortDate }}$0"
    ]
  },
  "Angular Full Date Pipe": {
    "prefix": "ng-pipe-date-full",
    "description": "Full date pipe - Format: Wednesday, September 15, 1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:fullDate }}$0"
    ]
  },
  "Angular Percent Pipe": {
    "prefix": "ng-pipe-percent",
    "description": "Percent pipe - Usage: number_expression &#x7c; percent[:digitInfo]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | percent:${digitInfo} }}$0"
    ]
  },
  "Angular Decimal Pipe": {
    "prefix": "ng-pipe-decimal",
    "description": "Decimal pipe - Usage: number_expression &#x7c; decimal[:digitInfo]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | decimal:${digitInfo} }}$0"
    ]
  },
  "Angular Slice Pipe": {
    "prefix": "ng-pipe-slice",
    "description": "Slice pipe - Usage: array_or_string_expression &#x7c; slice:start[:end]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | slice:${start}:${end} }}$0"
    ]
  },
  "Angular Currency Pipe": {
    "prefix": "ng-pipe-currency",
    "description": "Currency pipe - Usage: money &#x7c; currency:'EUR'",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | currency:'${CURRENCY}' }}$0"
    ]
  },
  "Angular Json Pipe": {
    "prefix": "ng-pipe-json",
    "description": "Json pipe - Usage: object &#x7c; json",
    "types": "typescript, html",
    "body": [
      "{{ ${object} | json }}$0"
    ]
  },
  "Angular Async Pipe": {
    "prefix": "ng-pipe-async",
    "description": "Async pipe - Usage: observable_or_promise_expression &#x7c; async",
    "types": "typescript, html",
    "body": [
      "{{ ${observable} | async }}$0"
    ]
  },
  "Angular Lifecycle OnChanges Hook": {
    "prefix": "ng-ngOnChanges",
    "description": "Lifecycle hook: Called before any other lifecycle hook",
    "types": "typescript",
    "body": [
      "ngOnChanges(changes: SimpleChanges): void {",
      "\t//Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.",
      "\t//Add '${implements OnChanges}' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle OnInit Hook": {
    "prefix": "ng-onInit",
    "description": "Lifecycle hook: Called after the constructor",
    "types": "typescript",
    "body": [
      "ngOnInit(): void {",
      "\t//Called after the constructor, initializing input properties, and the first call to ngOnChanges.",
      "\t//Add 'implements OnInit' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle DoCheck Hook": {
    "prefix": "ng-doCheck",
    "description": "Lifecycle hook: Called every time that the input properties of a component or a directive are checked",
    "types": "typescript",
    "body": [
      "ngDoCheck(): void {",
      "\t//Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.",
      "\t//Add 'implements DoCheck' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterContentInit Hook": {
    "prefix": "ng-afterContentInit",
    "description": "Lifecycle hook: Called after ngOnInit when the component's or directive's content has been initialized",
    "types": "typescript",
    "body": [
      "ngAfterContentInit(): void {",
      "\t//Called after ngOnInit when the component's or directive's content has been initialized.",
      "\t//Add 'implements AfterContentInit' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterContentChecked Hook": {
    "prefix": "ng-afterContentChecked",
    "description": "Lifecycle hook: Called after every check of the component's or directive's content",
    "types": "typescript",
    "body": [
      "ngAfterContentChecked(): void {",
      "\t//Called after every check of the component's or directive's content.",
      "\t//Add 'implements AfterContentChecked' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterViewInit Hook": {
    "prefix": "ng-afterViewInit",
    "description": "Lifecycle hook: Called after ngAfterContentInit when the component's view has been initialized",
    "types": "typescript",
    "body": [
      "ngAfterViewInit(): void {",
      "\t//Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.",
      "\t//Add 'implements AfterViewInit' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterViewChecked Hook": {
    "prefix": "ng-afterViewChecked",
    "description": "Lifecycle hook: Called after every check of the component's view. Applies to components only",
    "types": "typescript",
    "body": [
      "ngAfterViewChecked(): void {",
      "\t//Called after every check of the component's view. Applies to components only.",
      "\t//Add 'implements AfterViewChecked' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle OnDestroy Hook": {
    "prefix": "ng-onDestroy",
    "description": "Lifecycle hook: Called before the instance is destroyed",
    "types": "typescript",
    "body": [
      "ngOnDestroy(): void {",
      "\t//Called once, before the instance is destroyed.",
      "\t//Add 'implements OnDestroy' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Routing": {
    "prefix": "ng-router",
    "description": "Router template",
    "types": "typescript",
    "body": [
      "import { Routes, RouterModule } from '@angular/router';",
      "import { NgModule } from '@angular/core';",
      "",
      "import { ${Home}Component } from './';",
      "import { ${Name2}Component } from './';",
      "import { ${Name3}Component } from './';",
      "import { ${Name4}Component } from './';",
      "import { PageNotFoundComponent } from './';",
      "",
      "const routes: Routes = [",
      "\t{ path: '', component: ${Home}Component },",
      "\t{ path: '${path2}', component: ${Name2}Component },",
      "\t{ path: '${path3}', component: ${Name3}Component },",
      "\t{ path: '${path4}', component: ${Name4}Component },",
      "\t{ path: '**', component: PageNotFoundComponent },",
      "",
      "\t//{ path: 'path/:routeParam', component: MyComponent },",
      "\t//{ path: 'staticPath', component: ... },",
      "\t//{ path: '**', component: ... },",
      "\t//{ path: 'oldPath', redirectTo: '/staticPath' },",
      "\t//{ path: ..., component: ..., data: { message: 'Custom' }",
      "];",
      "",
      "@NgModule({",
      "\timports: [RouterModule.forChild(routes)],",
      "\texports: [RouterModule]",
      "})",
      "export class ${Feature}RoutingModule {}",
      "$0"
    ]
  },
  "Angular App Module Routes": {
    "prefix": "ng-router-appmodule",
    "description": "Routes to include in root module",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { RouterModule, Routes } from '@angular/router';",
      "",
      "const routes: Routes = [",
      "\t{ path: '', component: ${Home}Component },",
      "\t{ path: '${path}', component: ${Feature}Component },",
      "\t{ path: '**', component: PageNotFoundComponent },",
      "];",
      "",
      "@NgModule({",
      "\timports: [RouterModule.forRoot(routes)],",
      "\texports: [RouterModule]",
      "})",
      "export class AppRoutingModule {}",
      "$0"
    ]
  },
  "Angular Feature Module Routes": {
    "prefix": "ng-router-featuremodule",
    "description": "Routes to include in a feature module",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { RouterModule, Routes } from '@angular/router';",
      "import { CommonModule } from '@angular/common';",
      "",
      "const routes: Routes = [",
      "\t{ path: '${path}', component: ${Feature}Component }",
      "];",
      "",
      "@NgModule({",
      "\timports: [CommonModule, RouterModule.forChild(routes)],",
      "\texports: [RouterModule]",
      "})",
      "export class ${Feature}RoutingModule {}",
      "$0"
    ]
  },
  "Angular Route Feature": {
    "prefix": "ng-route-feature",
    "description": "Angular Route Feature",
    "types": "typescript",
    "body": [
      "{ path: '${path}', component: ${Feature}Component },$0"
    ]
  },
  "Angular Route Lazy": {
    "prefix": "ng-route-lazy",
    "description": "Router link",
    "types": "typescript",
    "body": [
      "{ path: '${path}', loadChildren: '${lazyPath}.module#${lazyModule}Module' },$0"
    ]
  },
  "Angular Route Lazy Ivy": {
    "prefix": "ng-route-lazy-ivy",
    "description": "Router link",
    "types": "typescript",
    "body": [
      "{ path: '${path}', loadChildren: () => import('${lazyPath}.module').then(m => m.${lazyModule}Module) },$0"
    ]
  },
  "Angular Router Link": {
    "prefix": "ng-router-link",
    "description": "Router link",
    "types": "typescript, html",
    "body": [
      "<a [routerLink]=\"[ '/${path}', ${routeParam} ]\">${name}</a>$0"
    ]
  },
  "Angular Router Attribute": {
    "prefix": "ng-router-attribute",
    "description": "Router link",
    "types": "typescript, html",
    "body": [
      "[routerLink]=\"[ '/${path}', ${routeParam} ]\"$0"
    ]
  },
  "Angular Router Active Link": {
    "prefix": "ng-router-linkActive",
    "description": "Router active link",
    "types": "typescript, html",
    "body": [
      "<a [routerLink]=\"[ '/${path}' ]\" routerLinkActive=\"active\">${name}</a>$0"
    ]
  },
  "Angular Router Outlet": {
    "prefix": "ng-router-outlet",
    "description": "Router outlet element",
    "types": "typescript, html",
    "body": [
      "<router-outlet></router-outlet>",
      "$0"
    ]
  },
  "Angular Router Outlet Name": {
    "prefix": "ng-router-outlet-name",
    "description": "Router outlet element with name",
    "types": "typescript, html",
    "body": [
      "<router-outlet name=\"${name}\"></router-outlet>",
      "$0"
    ]
  },
  "Angular CanActivate Guard Route": {
    "prefix": "ng-route-guard-canactivate",
    "description": "CanActivate Guard Route",
    "types": "typescript, html",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({",
      "\tprovidedIn: 'root'",
      "})",
      "export class ${CanActivate}Guard implements CanActivate {",
      "\tcanActivate(",
      "\t\troute: ActivatedRouteSnapshot,",
      "\t\tstate: RouterStateSnapshot",
      "\t): Observable<boolean> | Promise<boolean> | boolean {",
      "\t\treturn true;$0",
      "\t}",
      "}",
      ""
    ]
  },
  "Angular CanActivateChild Guard Route": {
    "prefix": "ng-route-guard-canactivatechild",
    "description": "CanActivateChild Route",
    "types": "typescript, html",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({",
      "\tprovidedIn: 'root'",
      "})",
      "export class ${CanActivateChild}Guard implements CanActivateChild {",
      "\tcanActivateChild(",
      "\t\troute: ActivatedRouteSnapshot,",
      "\t\tstate: RouterStateSnapshot",
      "\t): Observable<boolean> | Promise<boolean> | boolean {",
      "\t\treturn true;$0",
      "\t}",
      "}",
      ""
    ]
  },
  "Angular Resolve Guard Route": {
    "prefix": "ng-route-guard-resolve",
    "description": "Resolve Guard Route",
    "types": "typescript, html",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({",
      "\tprovidedIn: 'root'",
      "})",
      "export class ${Resolve}Guard implements Resolve<${T}> {",
      "\tresolve(",
      "\t\troute: ActivatedRouteSnapshot,",
      "\t\tstate: RouterStateSnapshot",
      "\t): Observable<any> | Promise<any> | any {",
      "\t\treturn true;$0",
      "\t}",
      "}",
      ""
    ]
  },
  "Angular CanLoad Guard Route": {
    "prefix": "ng-route-guard-canload",
    "description": "CanLoad Guard Route",
    "types": "typescript, html",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanLoad, Route } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({",
      "\tprovidedIn: 'root'",
      "})",
      "export class ${CanLoad}Guard implements CanLoad {",
      "\tcanLoad(",
      "\t\t${route}: Route",
      "\t): Observable<boolean> | Promise<boolean> | boolean {",
      "\t\treturn true;$0",
      "\t}",
      "}",
      ""
    ]
  },
  "Angular CanDeactivate Guard Route": {
    "prefix": "ng-route-guard-candeactivate",
    "description": "CanDeactivate Guard Route",
    "types": "typescript, html",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({",
      "\tprovidedIn: 'root'",
      "})",
      "export class ${CanDeactivate}Guard implements CanDeactivate<${T}> {",
      "\tcanDeactivate(",
      "\t\tcomponent: ${T},",
      "\t\troute: ActivatedRouteSnapshot,",
      "\t\tstate: RouterStateSnapshot",
      "\t): Observable<boolean> | Promise<boolean> | boolean {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular Container": {
    "types": "typescript, html",
    "prefix": "ng-container",
    "description": "Angular Container",
    "body": [
      "<ng-container>${1}</ng-container>",
      "$0"
    ]
  },
  "Angular Container with *ngFor": {
    "types": "typescript, html",
    "prefix": "ng-container-ngfor",
    "description": "Angular Container with *ngFor",
    "body": [
      "<ng-container *ngFor=\"let ${1:item} of ${2:items}\">",
      "  ${3:content}",
      "</ng-container>",
      "$0"
    ]
  },
  "Angular Container with *ngTemplateOutlet": {
    "types": "typescript, html",
    "prefix": "ng-container-template",
    "description": "Angular Container with *ngTemplateOutlet",
    "body": [
      "<ng-container *ngTemplateOutlet=\"${1}\"></ng-container>",
      "$0"
    ]
  },
  "Angular Container with *ngContainerOutlet": {
    "types": "typescript, html",
    "prefix": "ng-container-component",
    "description": "Angular Container with *ngContainerOutlet",
    "body": [
      "<ng-container *ngComponentOutlet=\"${1}\"></ng-container>",
      "$0"
    ]
  },
  "Angular template": {
    "types": "typescript, html",
    "prefix": "ng-template",
    "description": "Angular template",
    "body": [
      "<ng-template #${1:name}></ng-template>",
      "$0"
    ]
  },
  "Angular ngModel Directive": {
    "prefix": "ng-model",
    "description": "ngModel directive: [(ngModel)]=\"name\"",
    "types": "typescript, html",
    "body": [
      "[(ngModel)]=\"${name}\"$0"
    ]
  },
  "Angular If Directive": {
    "prefix": "ng-if",
    "description": "If directive: *ngIf=\"expression\"",
    "types": "typescript, html",
    "body": [
      "*ngIf=\"${expression}\"$0"
    ]
  },
  "Angular If Else Directive": {
    "prefix": "ng-if-else",
    "description": "v4: If else directive: *ngIf=\"expression; else\"",
    "types": "typescript, html",
    "body": [
      "<ng-container *ngIf=\"${expression}; else ${elseTemplate}\">",
      "\t$1",
      "</ng-container>",
      "<ng-template #${elseTemplate}>",
      "\t$2",
      "</ng-template>",
      "$0"
    ]
  },
  "Angular If Then Else Directive": {
    "prefix": "ng-if-then-else",
    "description": "v4: If then else directive: *ngIf=\"expression; then; else\"",
    "types": "typescript, html",
    "body": [
      "<ng-container *ngIf=\"${expression}; then ${thenTemplate}; else ${elseTemplate}\"></ng-container>",
      "<ng-template #${thenTemplate}>",
      "\t$1",
      "</ng-template>",
      "<ng-template #${elseTemplate}>",
      "\t$2",
      "</ng-template>",
      "$0"
    ]
  },
  "Angular For-loop Directive": {
    "prefix": "ng-for",
    "description": "For-loop directive",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${items}\"$0"
    ]
  },
  "Angular For-loop Directive with li element": {
    "prefix": "ng-for-li",
    "description": "For-loop directive with li element",
    "types": "typescript, html",
    "body": [
      "<li *ngFor=\"let ${item} of ${items}\">$0</li>"
    ]
  },
  "Angular For-loop Directive with index": {
    "prefix": "ng-for-index",
    "description": "For-loop directive with index",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${items}; let i=index\"$0"
    ]
  },
  "Angular For-loop Directive with trackBy": {
    "prefix": "ng-for-trackBy",
    "description": "For-loop directive with trackBy",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${items}; trackBy:${item}.id\"$0"
    ]
  },
  "Angular Class": {
    "prefix": "ng-class",
    "description": "CSS class",
    "types": "typescript, html",
    "body": [
      "[ngClass]=\"{'${class}': ${true}}\"$0"
    ]
  },
  "Angular Style": {
    "prefix": "ng-style",
    "description": "CSS style",
    "types": "typescript, html",
    "body": [
      "[ngStyle]=\"{'${property}': ${expression}}\"$0"
    ]
  },
  "Angular Switch": {
    "prefix": "ng-switch",
    "description": "Switch template",
    "types": "typescript, html",
    "body": [
      "<span [ngSwitch]=\"\">",
      "<p *ngSwitchCase=\"true\">",
      "",
      "</p>",
      "<p *ngSwitchCase=\"false\">",
      "",
      "</p>",
      "<p *ngSwitchDefault>",
      "",
      "</p>",
      "</span>"
    ]
  },
  "Angular Property": {
    "prefix": "ng-property",
    "description": "Property: [property]=\"expression\"",
    "types": "typescript, html",
    "body": [
      "[${property}]=\"${expression}\"$0"
    ]
  },
  "Angular Event": {
    "prefix": "ng-event",
    "description": "Event: (event) = \"onEvent()\"",
    "types": "typescript, html",
    "body": [
      "(${event}) = \"on${Event}()\"$0"
    ]
  },
  "Angular Input Property": {
    "prefix": "ng-input",
    "description": "Class Input Property",
    "types": "typescript",
    "body": [
      "@Input() ${class}: ${Class};$0"
    ]
  },
  "Angular Output Event": {
    "prefix": "ng-output",
    "description": "Class Output Event",
    "types": "typescript",
    "body": [
      "@Output() ${methodName} = new EventEmitter<${Class}>();$0"
    ]
  },
  "Angular Oneway Binding": {
    "prefix": "ng-binding-oneway",
    "description": "Property: [property]=\"expression\"",
    "types": "typescript, html",
    "body": [
      "[${property}]=\"${expression}\"$0"
    ]
  },
  "Angular Twoway Binding": {
    "prefix": "ng-binding-twoway",
    "description": "Two-way data binding with the NgModel",
    "types": "typescript, html",
    "body": [
      "[(ngModel)]=\"${Name}\"$0"
    ]
  },
  "Angular Interpolation": {
    "prefix": "ng-interpolation",
    "description": "Interpolation: {{ interpolation }}",
    "types": "typescript, html",
    "body": [
      "{{ ${interpolation} }}$0"
    ]
  },
  "Angular Loop Directive": {
    "prefix": "ng-repeat",
    "description": "Use ngFor instead.",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${items}\"$0"
    ]
  },
  "Angular Click Event": {
    "prefix": "ng-click",
    "description": "Click event",
    "types": "typescript, html",
    "body": [
      "(click)=\"${expression}\"$0"
    ]
  },
  "Submit Button": {
    "prefix": "ng-button-submit",
    "description": "A submit button element with a click event",
    "types": "typescript, html",
    "body": [
      "<button type=\"submit\">${Submit}</button>",
      "$0"
    ]
  },
  "Click Button": {
    "prefix": "ng-button",
    "description": "A button element with a click event",
    "types": "typescript, html",
    "body": [
      "<button (click)=\"${1:onClick()}\">${2:name}</button>",
      "$0"
    ]
  },
  "ng import": {
    "prefix": "ng-import",
    "description": "import module or component from path;",
    "types": "typescript, html",
    "body": [
      "import { ${2:moduleOrComponent} } from '${1:path}';",
      "$0"
    ]
  },
  "httpClient get": {
    "prefix": "ng-httpClient-get",
    "description": "HttpClient observable get request",
    "types": "typescript, html",
    "body": [
      "this.http.get('${url}')$0"
    ]
  },
  "Angular Debug": {
    "prefix": "ng-debug",
    "description": "pre obj pipe json",
    "types": "typescript, html",
    "body": [
      "<pre>{{ ${obj} | json }}</pre>$0"
    ]
  },
  "Angular Debug Async": {
    "prefix": "ng-debug-async",
    "description": "pre obj pipe async pipe json",
    "types": "typescript, html",
    "body": [
      "<pre>{{ ${obj} | async | json }}</pre>$0"
    ]
  },
  "Angular Flex Item Fill": {
    "prefix": "fx-item-fill",
    "description": "Flex Layout Item with fxFlexFill",
    "types": "typescript, html",
    "body": [
      "<div fxFlex=\"${value}%\" fxFlexFill>",
      "\t$0",
      "</div>"
    ]
  },
  "Cdk drag drop box": {
    "prefix": "m-drag-drop-box",
    "description": "Cdk drag drop box",
    "types": "typescript, html",
    "body": [
      "<div class=\"$1{drag-drop-box}\" cdkDrag>",
      "</div>$0"
    ]
  },
  "Angular Http Interceptor": {
    "prefix": "ng-http-interceptor",
    "description": "Intercept an outgoing HttpRequest and optionally transform it or the response.",
    "types": "typescript",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import {",
      "\tHttpEvent, HttpInterceptor, HttpHandler, HttpRequest",
      "} from '@angular/common/http';",
      "",
      "@Injectable({",
      "\tprovidedIn: 'root'",
      "})",
      "export class ${1:Name}Interceptor implements HttpInterceptor {",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler) {",
      "\t\treturn next.handle(req);",
      "\t}",
      "}"
    ]
  },
  "Cli Cheat Sheet": {
    "prefix": "cli-cheatsheet",
    "description": "Cli Cheat Sheet",
    "types": "typescript",
    "body": [
      "/*",
      "\tInstall Angular Cli",
      "\tnpm install -g @angular/cli",
      "",
      "\tUsage",
      "\tng help",
      "",
      "\tGenerate and serve an Angular project via a development server",
      "\tng new PROJECT-NAME",
      "\tcd PROJECT-NAME",
      "\tng serve",
      "",
      "\tGenerate Component",
      "\tYou can use the ng generate (or just ng g)",
      "\tExamples",
      "\t\tComponent: ng g component my-new-component",
      "\t\tDirective: ng g directive my-new-directive",
      "\t\tPipe:      ng g pipe my-new-pipe",
      "\t\tService:   ng g service my-new-service",
      "\t\tClass:     ng g class my-new-class",
      "\t\tGuard:     ng g guard my-new-guard",
      "\t\tInterface: ng g interface my-new-interface",
      "\t\tEnum:      ng g enum my-new-enum",
      "\t\tModule:    ng g module my-module",
      "",
      "\tBundling",
      "\tAll builds make use of bundling, and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality.",
      "\tng build --prod",
      "\tng serve --prod",
      "",
      "\tRun unit tests",
      "\tng test",
      "",
      "\tRun tests with coverage. The report will be in the coverage/ directory",
      "\tng test --code-coverage",
      "",
      "\tTests will execute after a build is executed via Karma, and it will automatically watch your files for changes.",
      "\tYou can run tests a single time via --watch=false or --single-run.",
      "",
      "\tRun end-to-end tests",
      "\tng e2e",
      "",
      "\tBefore running the tests make sure you are serving the app via ng serve. End-to-end tests are run via Protractor.",
      "",
      "\tLint you app code using tslint",
      "\tng lint",
      "",
      "\tOpen the official Angular API documentation for a given keyword on angular.io.",
      "\tng doc [search term]",
      "",
      "\tFor more info: https://cli.angular.io",
      "",
      " */"
    ]
  },
  "Angular content": {
    "types": "typescript, html",
    "prefix": "ng-content",
    "description": "Angular content",
    "body": [
      "<ng-content #${1:name}></ng-content>",
      "$0"
    ]
  }
}